<AML>
 <Item type="Method" id="1885CC1C5FD5412F84191355FE9C66F9" action="add">
  <comments>sample method - clone and use youre own logic to set data on Affected Items</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[' can be called from Workflow Paths/Activities
'
' Assumes workflow controlled item uses standard Affected Item data model !!!
'
'MethodTemplateName=VBMain;
Dim inn As Innovator = Me.getInnovator()
Dim q As item
Dim res As Item
Dim amlCmd As String = ""
  
Function Main() As Item
  'System.Diagnostics.Debugger.Break()
  Dim thisId As String = Me.GetID()
  Dim thisType As String = Me.GetType()

  ' get workflow controlled item of this WF "Actvity" - i.e. Express ECO
  q = Me.newItem("Workflow Process Activity","get")
  q.setAttribute("select","source_id(name)")
  q.setProperty("related_id",thisId)
  res = q.apply()
  If res.isError() Then Return res

  Dim wfProcessId As String = res.getItembyIndex(0).getProperty("source_id","")
  Dim wfProcessItem As Item = res.getItemByIndex(0).getPropertyItem("related_id")

  Dim wfControlledItem As Item = fnGetWfControlledOfThisWfProcess (wfProcessId,"owned_by_id,item_number,title,locked_by_id,status")
  If wfControlledItem.isError() Then Return wfControlledItem

  ' get all affected Items listed
  Dim affectedItems As Item = fnGetAffectedItems (wfControlledItem)
  If (affectedItems.getItemCount() >0) Then
   ' for each affected item set data
   Dim i As Integer
   For i=0 To affectedItems.getItemCount()-1
  	Dim affItemId As String = affectedItems.getItemByIndex(i).getProperty("new_item_id","")
  	
  	' update data to newest version if affected item (referenced by "new_item_id")
  	If affItemId <> "" Then
  	
  	  res = fnUpdateDataOnAffItem(wfControlledItem, affectedItems.getItemByIndex(i).getPropertyItem("new_item_id"))
      If res.isError() Then Return res
  	  
  	End If
   Next i
  End If
  res = fnUpdateDataOnWfControlledItem (wfControlledItem)
  If res.isError() Then Return res

  Return Me
End Function

'==========================
Private Function fnGetAffectedItems (ByRef wfCtrldItem As Item) As Item
	
  Dim wfCtrldItemType As String = wfCtrldItem.GetType()
  Dim affItemRelType As String = ""
  Select Case wfCtrldItemType
    
    Case "Express ECO"
      affItemRelType = wfCtrldItemType & " Affected Item"
    Case "Express DCO"
      affItemRelType = wfCtrldItemType & " Affected Item"
    Case "ECN"
      affItemRelType = wfCtrldItemType & " Affected Item"
    Case "ECR"
      affItemRelType = wfCtrldItemType & " Affected Item"
    Case "Simple ECO"
      affItemRelType = wfCtrldItemType & " Affected Item"
    
  End Select
  
  amlCmd = "<Item type='" & affItemRelType & "' action='get' select='id,related_id' serverEvents='0'>"
  amlCmd = amlCmd & "<source_id>" & wfCtrldItem.getID() & "</source_id>"
  amlCmd = amlCmd & "</Item>"
  q = Me.newItem("","")
  q.loadAML(amlCmd)
  res = q.apply()
  If res.isError() Then Return res
  Dim idList As String = "##"
  Dim a As Integer
  For a=0 To res.getItemCount()-1
  	idList = idList & "," & res.getItemByIndex(a).getProperty("related_id")
  Next a
  idList = idList.Replace("##,","")
  idList = idList.Replace("##","")
  If idList <> "" Then
    idList = "'" & idList.Replace(",","','") & "'"

    amlCmd = "<Item type='Affected Item' action='get' serverEvents='0' "
    amlCmd = amlCmd & "select='new_item_id(last_approval_date,name,item_number,state,locked_by_id),sort_order'>"
    amlCmd = amlCmd & "<id condition='in'>" & idList & "</id>"
    amlCmd = amlCmd & "<new_item_id condition='is not null'/>"
    amlCmd = amlCmd & "</Item>"
    q = Me.newItem("","")
    q.loadAML(amlCmd)
    res = q.apply()
  End If
  Return res

End Function


'==========================
Private Function fnGetWfControlledOfThisWfProcess (wfProcessId As String, selectPoperties As String) As Item
  amlCmd = "<Item type='Workflow' action='get' select='source_type,source_id(owned_by_id),related_id(*)'>"
  amlCmd = amlCmd & "<related_id>" & wfProcessId & "</related_id>"
  amlCmd = amlCmd & "<source_id condition='is not null'/>"
  amlCmd = amlCmd & "</Item>"
  q = Me.newItem("","")
  q.loadAML(amlCmd)
  res = q.apply()
  If res.isError() Then Return res
  
  amlCmd = "<Item type='" & res.getItemByIndex(0).getPropertyAttribute("source_type","keyed_name","") & "' action='get' "
  amlCmd = amlCmd & "select='" & selectPoperties & "'>"
  amlCmd = amlCmd & "<id>" & res.getItemByIndex(0).getProperty("source_id","invalid") & "</id>"
  amlCmd = amlCmd & "</Item>"
  q = Me.newItem("","")
  q.loadAML(amlCmd) 
  res = q.apply()
  Return res

End Function

'==========================
Private Function fnUpdateDataOnWfControlledItem (ByRef wfControlledItem As Item) As Item
  ' run as Super User identity 
  Dim plmIdentity As Aras.Server.Security.Identity  = Aras.Server.Security.Identity.GetByName("Super User")
  Dim PermissionWasSet As Boolean  = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity)

  '## add logic, if data on wf controlled item need to be set
  '...
  '...
  '...
  '...
  

  ' Revoke 'Aras PLM' permissions
  If (PermissionWasSet) Then Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity)

  Return Me
End Function  

'==========================
Private Function fnUpdateDataOnAffItem (ByRef wfControlledItem As Item, ByRef affectedItem As Item) As Item
  Dim wfOwner As String = wfControlledItem.getProperty("owned_by_id","")

  Dim updtItem As Item = inn.newItem(affectedItem.GetType(),"")
  updtItem.setAction("edit")
  updtItem.setID(affectedItem.getID())
  updtItem.setAttribute("serverEvents","0")
  updtItem.setAttribute("version","0")

  ' set date to today and user to current user
  Dim Now As String = DateTime.Now.toString("yyyy-MM-dd")

  '## add properties to reset here
  updtItem.setProperty("last_approval_date",Now)
  updtItem.setProperty("approver_user_id",inn.getUserId())

  ' run as Super User identity 
  Dim plmIdentity As Aras.Server.Security.Identity  = Aras.Server.Security.Identity.GetByName("Super User")
  Dim PermissionWasSet As Boolean  = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity)

  updtItem = updtItem.apply()

  ' Revoke 'Aras PLM' permissions
  If (PermissionWasSet) Then Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity)

  Return updtItem

End Function
]]></method_code>
  <method_type>VB</method_type>
  <name>Save WFdata to AffectedItems</name>
 </Item>
</AML>