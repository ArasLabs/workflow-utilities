<AML>
 <Item type="Method" id="96142798436345C3877F1CD739DE5A3E" action="add">
  <comments>use with LifeCycle (post) transition or Worflow (post) path server events or Activity Events</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// can be called from a LifeCycle transition of the workflow controlled item
// or on any Workflow Activity (onActivate event)

// assumes the "owned_by_id" of the workflow controlled item is the "coordinator" who shall be able to modify all activity with this workflow process
// will copy content of "owned_by_id" of the workflow controlled item to "managed_by_id" of all workflow activities.

string thisId = this.getID();
string thisType = this.getType();
Item q;
Item res;
Item wfProcessItem = null;
//System.Diagnostics.Debugger.Break();

Item wfControlledItem;

// if this Item is type "Activity" the method was called from the Workflow Process
if (thisType == "Activity") {
	q = this.newItem("Workflow Process Activity","get");
	q.setAttribute("select","source_id(name)");
	q.setProperty("related_id",thisId);
	res = q.apply();
	if (res.isError()) {return res;}

	string wfProcessId = res.getItemByIndex(0).getProperty("source_id","");

	string amlCmd = "";
	amlCmd += "<Item type='Workflow' action='get' select='source_type,source_id(owned_by_id),related_id(*)'>";
	amlCmd += "<related_id>" + wfProcessId + "</related_id>";
	amlCmd += "<source_id condition='is not null'/>";
	amlCmd += "</Item>";
	q = this.newItem("","");
	q.loadAML(amlCmd);
	res = q.apply();
	if (res.isError() ) {return res;}

	wfProcessItem = res.getItemByIndex(0).getPropertyItem("related_id");

	amlCmd = "<Item type='" + res.getItemByIndex(0).getPropertyAttribute("source_type","keyed_name","") + "' action='get' select='owned_by_id'>";
	amlCmd += "<id>" + res.getItemByIndex(0).getProperty("source_id","invalid") + "</id>";
	amlCmd += "</Item>";
	q = this.newItem("","");
	q.loadAML(amlCmd);
	wfControlledItem = q.apply();
	if (wfControlledItem.isError()) {return wfControlledItem;}
}
// not called from Activity (but from Life Cycle, where this = wf controlled item)
else {
	wfControlledItem = this;

	//get the workflow process of this item
	q = this.newItem("Workflow","get");
	q.setAttribute("select","related_id(*)");
	q.setProperty("source_id",thisId);
	res = q.apply();
	if (res.isError()) {return res;}

	if (res.getProperty("related_id","") != "") {wfProcessItem = res.getItemByIndex(0).getPropertyItem("related_id");}
}

if (wfProcessItem != null) {
	string changeOwner = wfControlledItem.getProperty("owned_by_id","");

	if (changeOwner == "") {return this;} // noting to do

	wfProcessItem.setProperty("managed_by_id",changeOwner);
	// call generic method, but run as Super User identity 
	Aras.Server.Security.Identity plmIdentity  = Aras.Server.Security.Identity.GetByName("Super User");
	bool PermissionWasSet = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity);

	wfProcessItem = wfProcessItem.apply("WorkflowProcess_UpdateManager");

	// Revoke  permissions
	if (PermissionWasSet) {Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity);}
	if (wfProcessItem.isError()) {return wfProcessItem;}
}
return this;]]></method_code>
  <method_type>C#</method_type>
  <name>CopyCtrldItemOwnerToWorkflow</name>
 </Item>
</AML>