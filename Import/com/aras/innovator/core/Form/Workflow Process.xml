<AML>
 <Item type="Form" id="7961DE2D23514835B3C19457D0687DA0" action="edit">
  <height>550</height>
  <name>Workflow Process</name>
  <width>1000</width>
  <Relationships>
   <Item type="Body" id="875D0B3A072747ED9BF5290DA7F3111A" action="edit">
    <source_id keyed_name="Workflow Process" type="Form">7961DE2D23514835B3C19457D0687DA0</source_id>
    <Relationships>
     <Item type="Field" id="A45DA625675048F48812A47D4AB8B860" action="merge">
      <bg_color>#FFFFFF</bg_color>
      <border_width>0</border_width>
      <field_type>html</field_type>
      <font_color>#000000</font_color>
      <font_family>arial, helvetica, sans-serif</font_family>
      <font_size>8pt</font_size>
      <font_weight>bold</font_weight>
      <html_code><![CDATA[<span id="activity_summary">

  <script type="text/javascript">
   top.aras.uiAddConfigLink2Doc4Assembly(document); //because there are .Net control on the form
  </script>

  <fieldset style="border-width: 2px;">
    <legend style="font-size: larger;" aras_ui_resource_key="imports_core.activity_summary"></legend>
    <table cellpadding="0" cellspacing="0" border="0">
      <tr>
        <td style="width:395px; height: 200px;">
          <table cellpadding="5" cellspacing="0" border="0" width="100%">
            <tr>
              <td aras_ui_resource_key="imports_core.name"></td>
              <td aras_ui_resource_key="imports_core.managed_by"></td>
              <td aras_ui_resource_key="imports_core.role"></td>
            </tr>
            <tr>
              <td>
                <select id="listOfActivities" onchange="try{mainActivityHandler.selectActivity(this.value);}catch(e){};" />
              </td>
              <td>
                <input type="Text" id="managedById" disabled>
              </td>
              <td>
                <input type="Text" id="role" disabled>
              </td>
            </tr>
            <tr>
              <td aras_ui_resource_key="imports_core.status"></td>
              <td aras_ui_resource_key="imports_core.escalate_to"></td>
              <td aras_ui_resource_key="imports_core.duration"></td>
            </tr>
            <tr>
              <td>
                <input type="Text" id="status" disabled>
              </td>
              <td>
                <input type="Text" id="escalateTo" disabled>
              </td>
              <td>
                <input type="Text" id="duration" disabled>
              </td>
            </tr>
            <tr>
              <td colspan="3" aras_ui_resource_key="imports_core.message"></td>
            </tr>
            <tr>
              <td colspan="3">
                <input type="Text" id="message" style='width: 90%' disabled>
              </td>
            </tr>
          </table>
        </td>
        <td>
          <fieldset style="border-width: 2px;">
            <legend style="font-size: larger;" 
              aras_ui_resource_key="imports_core.assignments"></legend>
            <table cellpadding="0" cellspacing="0" border="0" style="height:100%;">
              <tr>
                <td>
                  <script type="text/javascript" for="toolbar" event="Onload()">
                    initToolbar();
                  </script>

                  <script type="text/javascript" for="toolbar" event="Onclick(tbItem)">
                    onClickItem(tbItem);
                    return;
                  </script>

                  <object id="toolbar" style="height: 28px; width:460px;" classid="../cbin/Toolbar.dll#Aras.Client.Controls.Toolbar">
                  </object>
                </td>
              </tr>
              <tr>
                <td>
                  <script type="text/javascript" for="grid" event="GridStart(isSuccess)">
                    initGrid();
                    loadGrid();
                  </script>

                  <script type="text/javascript" for="grid" event="GridXmlLoaded(isSuccess)">
                    onGridXmlLoaded();
                    return;
                  </script>

                  <script type="text/javascript" for="grid" event="GridClick(rowId, col)">
                    onSelectItem(rowId, col);
                    return;
                  </script>

                  <script type="text/javascript" for="grid" event="GridEditCell(event, rowId, col)">
                    return onEditCell(event, rowId, col);
                  </script>

                  <script type="text/javascript" for="grid" event="GridKeyPress(event)">
                    onKeyPressed(event);
                    return;
                  </script>

                  <script type="text/javascript" for="grid" event="OnMenuShow(ContextMenu, p)">
                    return gridMenuShow(ContextMenu, p);
                  </script>

                  <script type="text/javascript" for="grid" event="GridMenuInit(r, c, p)">
                    onSelectItem(r, c);
                    return gridMenuInit(r, c);
                  </script>

                  <script type="text/javascript" for="grid" event="GridMenuClick(cmd, r, c)">
                    gridMenuClick(cmd, r, c);
                  </script>

                  <object id="grid" style="width:460px; height:172px;" onbeforedeactivate= "document.grid.turnEditOff()"  classid="../cbin/TreeTable.dll#Aras.Client.Controls.GridContainer">
                  </object>
                </td>
              </tr>
            </table>
          </fieldset>
        </td>
      </tr>
    </table>
  </fieldset>
</span>

<script type="text/javascript">
// to synchronize grid with saving of Workflow Process

function Synchronizer(){
  this.lastValue = this.getCurrentFlag();
  this.newValue  = this.lastValue;
}

Synchronizer.prototype.lastValue;
Synchronizer.prototype.newValue;

Synchronizer.prototype.getCurrentFlag = function Synchronizer_getCurrentFlag(){
  var itmNd = parent.item;
  if (!itmNd || !itmNd.xml) return null;
  var res;
  
  var flagPropName = "modified_on";
  var flagPropNd = itmNd.selectSingleNode(flagPropName);
  res = (flagPropNd) ? flagPropNd.text : "";
  
  var flagPropName2 = "locked_by_id";
  var flagPropNd2 = itmNd.selectSingleNode(flagPropName2);
  res += (flagPropNd2) ? flagPropNd2.text : "";
  return res;
}

Synchronizer.prototype.isParentItemSaved = function Synchronizer_isParentItemSaved(){
  this.newValue = this.getCurrentFlag();
  var res = (this.lastValue == this.newValue) ? false : true;
  if (res) {
    this.lastValue = this.newValue;
  }
  return res;
}

Synchronizer.prototype.synch = function Synchronizer_synch(){
  var oldSelectedActID = (mainActivityHandler && mainActivityHandler.selectedActivity) ? mainActivityHandler.selectedActivity.id : "";
  onload_handler4assignments(true); //do not show active activity
  if (oldSelectedActID && mainActivityHandler) mainActivityHandler.selectActivity(oldSelectedActID);
}

var mainSynchronizer = new Synchronizer();
</script>

<script type="text/javascript">
//toolbar handling
var toolbarXML =  ''+
                  '<toolbarapplet ' +
                  '  buttonsize      = "26,25">' +
                  '  <toolbar id="toolbar">' +
                  '    <button disabled="false" image="icons/20x20new.gif"         id="new"     tooltip="'+top.aras.getResource("", "imports_core.new_assignment")+'"     statusmsg="'+top.aras.getResource("", "imports_core.new_assignment")+'"/>' +
                  '    <button disabled="false" image="icons/20x20delete.gif"      id="delete"    tooltip="'+top.aras.getResource("", "imports_core.delete_selected_assignment")+'"    statusmsg="'+top.aras.getResource("", "imports_core.delete_selected_assignment")+'"/>' +
                  '  </toolbar>' +
                  '</toolbarapplet>';
var toolbar;
var bIS_ASM_TOOLBAR_LOADED = false;
var bIS_ASM_TOOLBAR_XML_LOADED = false;

function initToolbar(){
  bIS_ASM_TOOLBAR_LOADED = true;
  toolbar = document.toolbar;
}
function loadToolbar()
{
  if (!bIS_ASM_TOOLBAR_LOADED || !toolbar) return;
    toolbar.loadToolbarFromStr(toolbarXML);
    toolbar.show();
  bIS_ASM_TOOLBAR_XML_LOADED = true;
}
function onClickItem(tbItem){

  var srcActivity = mainActivityHandler.selectedActivity;
  var srcActivityNd = srcActivity.node;
  if (!srcActivityNd || !document.grid) return;
  
  var cmdID = tbItem.getId();
  
  switch (cmdID){
    case "new":
      var relshipTypeNd = top.aras.getItemByName("RelationshipType", "Activity Assignment");
      var relshipTypeId = (relshipTypeNd) ? top.aras.getItemProperty(relshipTypeNd,"id") : null;
      if (!relshipTypeId) return;
      
      var res = onF2Pressed(0);
      if ( res && res.itemID != "" && checkIdentityInRole(res.itemID, res.keyed_name) )
      {
        var relshipNd = top.aras.newRelationship(relshipTypeId, srcActivityNd, false, window, null);
        srcActivity.addAssignmentAndFillGrid(relshipNd, document.grid);
        afterF2PressedHandler(res, 0);
      }
      break;
    case "delete":
      var selectedIdsStr = document.grid.GetSelectedItemIDs(",");
      var selectedIdsArr = selectedIdsStr.split(",");
      for (var i=0; i<selectedIdsArr.length;i++){
        var relId = selectedIdsArr[i]
        var rel = srcActivityNd.selectSingleNode('Relationships/Item[@id="' + relId + '"]');
        if (!rel) {
          document.grid.deleteRow(relId);
          return false;
        }
        var act = rel.getAttribute("action");
        if (act == "add") {
          srcActivity.allAssignments.removeAssignment(relId);
          document.grid.deleteRow(relId);
        }
        else if (act!="delete"){
          rel.setAttribute("action", "delete");
          for (var i=0; i<document.grid.getColumnCount(); i++)
          {
            var cell = document.grid.cells(relId, i);
            cell.setFont('Arial-italic-8');
            cell.setTextColor('#b0b0b0');
          }
          if (!top.aras.isTempID(srcActivity.id)){
            setDirtyAttribute(parent.item);
            setDirtyAttribute(srcActivity.node);
          }
        }
      }
      break;
  }
}
function setDirtyAttribute(item){
  item.setAttribute("isDirty","1");
}
</script>

<script type="text/javascript">
var initGridXML = ''+
                  '<table font="Arial-8" editable="true" link_func="onLink" draw_grid="true" multiselect="true" column_draggable="true" enableHtml="true" enterAsTab="false" onClick="onSelectItem" onDoubleClick="onDoubleClick" onStart="onGridAppletLoad" onEditCell="onEditCell" onMenuInit="onMenuCreate" onMenuClick="onMenuClicked" onXMLLoaded="onXmlLoaded" onKeyPressed="onKeyPressed"> '+
                  '  <thead> '+
                  '    <th align="c">'+top.aras.getResource("", "imports_core.name")+'</th> '+
                  '    <th align="c">'+top.aras.getResource("", "imports_core.required")+'</th> '+
                  '    <th align="c">'+top.aras.getResource("", "imports_core.for_all")+'</th> '+
                  '    <th align="c">'+top.aras.getResource("", "imports_core.voting_weight")+'</th> '+
                  '    <th align="c">'+top.aras.getResource("", "imports_core.escalate_to")+'</th> '+
                  '  </thead> '+
                  '  <columns> '+
                  '    <column width="100" edit="FIELD" align="l" size="8" order="0"/> '+
                  '    <column width="80" edit="FIELD" align="c" size="8" order="1"/> '+
                  '    <column width="80" edit="FIELD" align="c" size="8" order="2"/> '+
                  '    <column width="100" edit="FIELD" align="r" size="8" order="3"/> '+
                  '    <column width="100" edit="FIELD" align="l" size="8" order="4"/> '+
                  '  </columns> '+
                  '  <menu /> '+
                  '</table>';
//grid handling
var grid;
var deletedFont_const      = 'Arial-italic-8';
var deletedTextColor_const = '#b0b0b0';
var bKEYEDNAME_INPUT_IS_IN_PROGRESS = false;
var bIS_ASM_GRID_LOADED = false;
var bIS_ASM_GRID_XML_LOADED = false;

onload = function onload_handler4assignments(notShowCurrentActivity){
  var doShowCurActivity = (notShowCurrentActivity) ? false : true;
  mainActivityHandler = new ActivityHandler(doShowCurActivity);
  var mainTimerID = window.setInterval("if (mainSynchronizer && mainSynchronizer.isParentItemSaved()) mainSynchronizer.synch();",500);
  loadToolbar();
}

eval(top.aras.getFileText(top.aras.getBaseURL() + "/javascript/PopulateDocByLabels.js"));

function PopulateDocByLabels_customized4WP_form()
{
  PopulateDocByLabels();
}
window.attachEvent("onload", PopulateDocByLabels_customized4WP_form);

function onGridXmlLoaded(){
  bIS_ASM_GRID_XML_LOADED = true;
}
function initGrid(){
  grid = document.grid;
}
function loadGrid(){
  grid.initXML(initGridXML);
}
function onSelectItem(rowId, col)
{
  if (!grid) return;
  if (!rowId) {
   grid.turnEditOff();
   return;
  }
  mainActivityHandler.selectedActivity.allAssignments.selectAssignment(rowId, col);
}

function onEditCell(event,row,col){
//if event==2 (EditFinish) then if we return false that causes input focus to return to cell
  var allAssignments = mainActivityHandler.selectedActivity.allAssignments;
  if (!allAssignments) return (event == 2);//if there is no row on EditFinish then return true
  
  var curAssignment = allAssignments.getAssignment(row);
  if (!curAssignment) return (event == 2);//if there is no row on EditFinish then return true
  
  allAssignments.selectAssignment(row,col)
  if (curAssignment.node.getAttribute("action") == "delete") return false;
  if (!document.grid || !row || !curAssignment){
    return;
    document.grid.turnEditOff();
  }
  var curCell = document.grid.cells(row,col);
  if (!curCell) return;
  
  var newValue = curCell.getValue();
  bKEYEDNAME_INPUT_IS_IN_PROGRESS = (curAssignment.getPropType(col)=="item") ? true : false;
  
  if (event==1 && newValue.substr(0, 9)!="<checkbox") return;  // this is ongoing typing event - ignore it
  
  if (event==0) {
    return;
  }
  if ((event==2 || (event==1 && newValue.substr(0, 9)=="<checkbox"))&& curCell.wasChanged()) {
    if (newValue.substr(0, 9)=="<checkbox") newValue = (curCell.isChecked()) ? "1" : "0";
    var res = curAssignment.setProperty(col,newValue);
    if (!res) curCell.setValue("");
  }
}

function onKeyPressed(kEv) {
  var keyCode = kEv.KeyCode;
  if (keyCode == 113 && bKEYEDNAME_INPUT_IS_IN_PROGRESS) // F2 pressed
  {
    var res = onF2Pressed();
    if (res) afterF2PressedHandler(res);
  }
}
function onF2Pressed(colNumber){
  var res = showModalDialog(top.aras.getScriptsURL() + 'searchDialog.html', { aras: window.top.aras, itemtypeName: "Identity" }, 'dialogHeight:450px; dialogWidth:700px; status:0; help:0; resizable:1');
  return res;
}
function afterF2PressedHandler(res, colNumber)
{
  var curAssignment;
  try{ curAssignment = mainActivityHandler.selectedActivity.allAssignments.selectedAssignment;} catch (e){}
  if (!curAssignment) return;
  
  var handledColNumber = (colNumber || colNumber==0) ? colNumber : curAssignment.curColNumber;
  
  var keyed_name = res.keyed_name;
  if ( !checkIdentityInRole(res.itemID, keyed_name) ) return;
  
  curAssignment.setProperty(handledColNumber,keyed_name);
  var curCell = document.grid.cells(curAssignment.id,handledColNumber);
  if (curCell) curCell.setValue(keyed_name);
  document.grid.turnEditOff();
}
function checkIdentityInRole(itemID, keyed_name)
{
  var role_knNd;
  var role_id = "";
  var role_kn = "";
  try{
    role_knNd = mainActivityHandler.selectedActivity.node.selectSingleNode("role");
    role_id = (role_knNd) ? role_knNd.text : "";
    role_kn = (role_knNd) ? role_knNd.getAttribute("keyed_name") : "";
  } catch (e){}
  if (role_kn!="World" && !isIdentityInRole(itemID, role_id)){
    top.aras.AlertError(top.aras.getResource("", "imports_core.identity_not_in_role", keyed_name, role_kn));
    return false;
  }
  return true;
}
function gridMenuShow(menu, p){
  
}
var New_menuitm = top.aras.getResource("", "imports_core.new");
var Pick_Replace_menuitm = top.aras.getResource("", "imports_core.pick_replace_identity");
var Delete_menuitm = top.aras.getResource("", "imports_core.delete");

function gridMenuInit(r, c)
{
  var res = true;
  try
  {
    var g = document.grid;
    if (!mainActivityHandler.selectedActivity.isGridEditable) 
    {
      g.MenuRemoveAll();
      res = false;
    }
    else
    {
      g.MenuRemoveAll();
      g.MenuAdd(New_menuitm);
      if (c==0 || c==4) g.MenuAdd(Pick_Replace_menuitm);
      g.MenuAdd(Delete_menuitm);
    }
  } 
  catch (e)
  {
    res = false;
  }
  return res;
}
function gridMenuClick(cmd, r, c){
  var tmpObj = new tbItem();
  tmpObj.getId = new Function("return this.id;");
  switch(cmd){
    case New_menuitm:
      tmpObj.id = "new";
      onClickItem(tmpObj);
      break;
    case Pick_Replace_menuitm:
      var res = onF2Pressed(c);
      if (res) afterF2PressedHandler(res, c);
      break;
    case Delete_menuitm:
      tmpObj.id = "delete";
      onClickItem(tmpObj);
      break;
  }
  function tbItem(id){
    this.id = id;
  }
}

//local cache
var identityInRole = new Array();
var userInRole = new Array();

function isIdentityInRole(selected_id, role_id, is_user_id_selected){
  if (role_id == "") return true;
  
  //check in cache
  if (is_user_id_selected && userInRole[selected_id] && userInRole[selected_id][role_id] !== undefined)
    return userInRole[selected_id][role_id];
  else if (!is_user_id_selected && identityInRole[selected_id] && identityInRole[selected_id][role_id])
    return identityInRole[selected_id][role_id];
    
  var methodName = "is_identity_in_role";
  var body = "<selected_id>"+selected_id+"</selected_id><is_user_id>" + ((is_user_id_selected) ? 1 : 0) + "</is_user_id><role_id>"+role_id+"</role_id>";
  var resNodeXPath = "//is_in_role";
  
  var methodRes = top.aras.applyMethod(methodName, body);
  var resDom = top.aras.createXMLDocument();
  resDom.loadXML(methodRes);
  var resNd = resDom.selectSingleNode(resNodeXPath);
  var resStr = (resNd) ? resNd.text : "";
  var res = (resStr == "1") ? true : false;
  //++++Test: is role_id Owner or Manager or Creator
  if (resStr!="" && resStr!="1" && resStr!="0"){
    var tmpObj = getRealPropNameAndIsUser(resStr)
    var propName = tmpObj.propName;
    var isUser = tmpObj.isUser;
    var wflItem = parent.item;
    if (wflItem && wflItem.xml && propName){
      var role_knNd = wflItem.selectSingleNode(propName);
      var role_id = (role_knNd) ? role_knNd.text : "";
      role_kn = (role_knNd) ? role_knNd.getAttribute("keyed_name") : "";
      tmpObj = getRealPropNameAndIsUser(role_kn);
      var propName2 = tmpObj.propName;
      if (propName2 != ""){
        role_id = top.aras.getItemProperty(wflItem, propName2);
        isUser = tmpObj.isUser;
      }
      if (isUser == "1"){
        res = (top.aras.getUserID() == role_id) ? true : false;
      } else {
        body = "<selected_id>"+top.aras.getUserID()+"</selected_id><is_user_id>1</is_user_id><role_id>"+role_id+"</role_id>";
        methodRes = top.aras.applyMethod(methodName, body);
        resDom.loadXML(methodRes);
        resNd = resDom.selectSingleNode(resNodeXPath);
        resStr = (resNd) ? resNd.text : "";
        res = (resStr == "1") ? true : false;
      }
    }
  }
  //-----Test: is role_id Owner or Manager or Creator
  
  //put result in cache
  if (is_user_id_selected)
  {
    if (userInRole[selected_id] === undefined) userInRole[selected_id] = new Array();
    userInRole[selected_id][role_id] = res;
  }
  else
  {
    if (identityInRole[selected_id] === undefined) identityInRole[selected_id] = new Array();
    identityInRole[selected_id][role_id] = res;
  }
    
  return res;
  
  function getRealPropNameAndIsUser(resStr){
    var retObj = new Object();
    retObj.propName = "";
    retObj.isUser = "0";
    switch (resStr.toUpperCase()){
      case "OWNER":
        retObj.propName = "process_owner";
        break;
      case "MANAGER":
        retObj.propName = "managed_by_id";
        break;
      case "CREATOR":
        retObj.propName = "created_by_id";
        retObj.isUser = "1";
        break;
    }
    return retObj;
  }
}

function setEditableGridAndToolbar(is_editable){
  if (!bIS_ASM_TOOLBAR_XML_LOADED || !bIS_ASM_GRID_XML_LOADED) {
    setTimeout("setEditableGridAndToolbar("+is_editable+")", 30);
    return;
  }
  var grid = document.grid;
  if (grid) {
    try{
      grid.setEditable(is_editable);
      grid.Editable = is_editable;
    } catch (e){}
  }
  
  var toolbar = document.toolbar;
  if (toolbar){
    if (is_editable) {
      toolbar.enable();
    }else{
      toolbar.disable();
    }
  }
}
</script>

<script type="text/javascript">
// Activity object
function Activity(actNd){
  if (actNd && actNd.xml){
    this.node = actNd;
    var id = actNd.getAttribute("id");
    if (!id) {
      this.setError("Wrong input parameter id");
      return null;
    }
    this.id = id;
    var label = top.aras.getItemProperty(this.node,"label","");
    var name;
    if (label == undefined || label == ""){
      name = top.aras.getItemProperty(this.node,"name","");
    }
    else{
      name = label;
    }
    this.name = name;
  } else {
    this.setError("Activity node is not specified.");
    return null;
  }
  //two arrays must have the same length
  var fieldNames = new Array("managedById","role","status","escalateTo","duration","message");
  var propNames = new Array("managed_by_id","role","state","escalate_to","expected_duration","message");

  this.re4ItemProps = /^managed_by_id$|^role$|^escalate_to$/;//properties having type=Item
  
  this.fields = new Array();
  var tmpField;
  for (var i=0;i<fieldNames.length;i++){
    tmpField = new Object();
    tmpField.field    = document.getElementById(fieldNames[i]);
    tmpField.propName = propNames[i];
    if (tmpField.field && tmpField.propName) this.fields.push(tmpField);
  }
  if(! this.node.selectSingleNode('Relationships')) this.node.appendChild(this.node.ownerDocument.createElement('Relationships'));
  var tmpNd = this.node.selectSingleNode("Relationships");
  this.allAssignments = new Assignments(tmpNd);
  var isGridEditable = isIdentityInRole(top.aras.getUserID(), top.aras.getItemProperty(this.node,"managed_by_id"), true);
  isGridEditable = (isGridEditable) ? Boolean(top.aras.getItemProperty(parent.item,"state")=="Active" && top.aras.getItemProperty(parent.item,"locked_by_id","")==top.aras.getUserID() && top.aras.getItemProperty(this.node,"state")!="Closed" && top.aras.getItemProperty(this.node,"managed_by_id","")!="") : false;
  this.isGridEditable = isGridEditable;
  this.hasError = false;
  return true;
}
Activity.prototype.node;
Activity.prototype.id;
Activity.prototype.name;
Activity.prototype.fields;//array of objects: .field is html field, .propName is corresponding property
Activity.prototype.re4ItemProps;
Activity.prototype.allAssignments;
Activity.prototype.errorMessage;
Activity.prototype.hasError;
Activity.prototype.isGridEditable;

Activity.prototype.setError = function Activity_setError(errMessage){
  this.hasError = true;
  this.errorMessage = errMessage;
}
Activity.prototype.showInForm = function Activity_showInForm(errMessage){
  if (this.hasError) return;
  var tmpValue;
  for (var i=0;i<this.fields.length;i++){
    tmpValue = top.aras.getItemProperty(this.node,this.fields[i].propName,"");
    var propName = this.fields[i].propName;
    if (propName.search(this.re4ItemProps)!=-1){
      var tmpNd = this.node.selectSingleNode(this.fields[i].propName);
      if (tmpNd) tmpValue = tmpNd.getAttribute("keyed_name");
    }
    
    tmpValue = (tmpValue) ? tmpValue : "";
    this.fields[i].field.value = tmpValue;
  }
  var targetDropDown = document.getElementById("listOfActivities");
  if (targetDropDown && targetDropDown.options(this.id)){
    targetDropDown.options(this.id).selected = 1;
  }
  this.allAssignments.fillGrid();
  setEditableGridAndToolbar(this.isGridEditable);
}

Activity.prototype.addAssignment = function Activity_addAssignment(assignmentNd){
  var newAssignment = new Assignment(assignmentNd);
  if (newAssignment.hasError) return null;
  this.allAssignments.addAssignment(newAssignment);
  this.allAssignments.selectAssignment(newAssignment.id);
  return true;
}

Activity.prototype.addAssignmentAndFillGrid = function Activity_addAssignmentAndFillGrid(assignmentNd,targetGrid){
  var res = this.addAssignment(assignmentNd);
  if (!res) return null;
  this.allAssignments.selectedAssignment.addRow2Grid(targetGrid);
  return true;
}
</script>

<script>
//Assigment object
function Assignment(itemNd){
  if (!itemNd){
    this.hasError = true;
    return;
  }
  this.node = itemNd;
  this.id   = itemNd.getAttribute("id");
  this.propNames = new Array("related_id","is_required","for_all_members","voting_weight","escalate_to");
  this.re4ItemProps = /^related_id$|^escalate_to$/;//properties having type=Item
  this.re4BoolProps = /^is_required$|^for_all_members$/;//properties having type=Boolean
}
Assignment.prototype.node;
Assignment.prototype.hasError;
Assignment.prototype.id;
Assignment.prototype.re4ItemProps;
Assignment.prototype.re4BoolProps;
Assignment.prototype.propNames;
Assignment.prototype.curColNumber;

Assignment.prototype.addRow2Grid = function Assignment_addRow2Grid(targetGrid){
  var delim = "|";
  if (this.hasError || !targetGrid) return "";
  var isDeleted;
  try{isDeleted = (this.node.getAttribute("action")=="delete") ? true : false;}catch(e){}
  var emptyRow = "";
  targetGrid.addRow(this.id,emptyRow,"1");
  for (var i=0;i<this.propNames.length;i++){
    var curPropName = this.propNames[i];
    var curCell = targetGrid.cells(this.id,i);
    var val="";
    if (!curCell) continue;
    if (curPropName.search(this.re4ItemProps)!=-1){
      var tmpNd = this.node.selectSingleNode(curPropName+"/Item");
      val = (tmpNd) ? top.aras.getItemProperty(tmpNd,"keyed_name","") : "";
      if (!val){
        tmpNd = this.node.selectSingleNode(curPropName);
        val = (tmpNd) ? tmpNd.getAttribute("keyed_name"):"";
      }
    } else if (curPropName.search(this.re4BoolProps)!=-1){
      var boolVal= top.aras.getItemProperty(this.node,curPropName,"");
      boolVal = (!boolVal || boolVal == "0") ? "0" : "1";
      val = "<checkbox state="+boolVal+">";
    } else {
      val = top.aras.getItemProperty(this.node,curPropName,"");
    }
    if (val) curCell.setValue(val);
    if (isDeleted) curCell.setFont('Arial-italic-8');
  }
  return;
}

Assignment.prototype.getPropType = function Assignment_getPropType(colNumber){
  var propName = this.getPropNameByColumn(colNumber);
  var res;
  if (!propName){
    res = null;
  } else if (propName.search(this.re4ItemProps)!=-1){
    res = "item";
  } else if (propName.search(this.re4BoolProps)!=-1){
    res = "bool";
  } else {
    res = "text";
  }
  return res;
}
Assignment.prototype.getPropNameByColumn = function Assignment_getPropNameByColumn(colNumber){
  var res=null;
  switch (colNumber){
    case 0:
      res="related_id";
      break;
    case 1:
      res="is_required";
      break;
    case 2:
      res="for_all_members";
      break;
    case 3:
      res="voting_weight";
      break;
    case 4:
      res="escalate_to";
      break;
  }
  return res;
}

Assignment.prototype.setProperty = function Assignment_setProperty(colNumber,newValue){
  if (colNumber == null && this.curColNumber) colNumber = this.curColNumber;
  var propName = this.getPropNameByColumn(colNumber);
  if (propName.search(this.re4ItemProps)!=-1){
    var tmpItem = top.aras.getItemByKeyedName('Identity',newValue,0,'','keyed_name');
    var identID = (tmpItem) ? tmpItem.getAttribute("id") : "";
    newValue = (identID) ? identID : null;
  }
  var res = (newValue==null) ? null : top.aras.setItemProperty(this.node,propName,newValue);
  if (this.node.getAttribute("action")!="add") this.node.setAttribute("action","edit");
  
  return res;
}

</script>

<script>
//Assigments object
function Assignments(relshipsNd){
  this.itemsArray = new Array();
  this.RelationshipsNd = relshipsNd;
  if (relshipsNd){
    var assignmentNds = this.RelationshipsNd.selectNodes("Item[@type='Activity Assignment']");
    var tmpAssignment;
    for (var i=0;i<assignmentNds.length;i++){
      tmpAssignment = new Assignment(assignmentNds[i]);
      this.itemsArray.push(tmpAssignment);
    }
  }
  this.selectedAssignment = null;
  this.grid = document.grid;
}
Assignments.prototype.RelationshipsNd;
Assignments.prototype.selectedAssignment;
Assignments.prototype.hasError;
Assignments.prototype.itemsArray;
Assignments.prototype.grid;

Assignments.prototype.fillGrid = function Assignments_fillGrid(){
  if (!this.grid) return;
  if (!bIS_ASM_GRID_XML_LOADED) {
    setTimeout("mainActivityHandler.selectedActivity.allAssignments.fillGrid()", 30);
    return;
  }
  var rowsNum = this.grid.getRowsNum();
  for (var i=rowsNum-1;i>=0;i--){
    var r = this.grid.getRowId(i);
    if (r) this.grid.deleteRow(r);
  }
  if (!this.RelationshipsNd) return;
  for (var i=0;i<this.itemsArray.length;i++){
    this.itemsArray[i].addRow2Grid(this.grid);
  }
  
}
Assignments.prototype.selectAssignment = function Assignments_selectAssignment(id,colNumber){
  if (!id) {
   this.selectedAssignment = null;
   return;
  }else{
    for (var i=0;i<this.itemsArray.length;i++){
      if (this.itemsArray[i].id==id) this.selectedAssignment = this.itemsArray[i];
    }
  }
  if (this.selectedAssignment) this.selectedAssignment.curColNumber = colNumber;
}
Assignments.prototype.addAssignment = function Assignments_addAssignment(newAssignment){
  this.itemsArray.push(newAssignment);
}

Assignments.prototype.getAssignment = function Assignments_getSelectedAssignment(id){
  var res = null
  for (var i=0;i<this.itemsArray.length;i++){
    if (this.itemsArray[i].id == id) res = this.itemsArray[i];
  }
  return res;
}

Assignments.prototype.removeAssignment = function Assignments_removeAssignment(id)
{
  var nd2del;
  if (this.RelationshipsNd) nd2del = this.RelationshipsNd.selectSingleNode("Item[@id='"+id+"']");
  if (nd2del) nd2del.parentNode.removeChild(nd2del);
  var j = -1;
  for (var i=0;i<this.itemsArray.length;i++)
  {
    if (this.itemsArray[i].id == id) j = i;
  }
  if (j>-1) this.itemsArray.splice(j, 1);
}
</script>

<script>
// ActivityHandler object 
function ActivityHandler(selectActiveActFlag)
{
  if (!parent.item || !parent.item.xml) return;

  var curWflProcess = parent.item;

  if (parent.item.getAttribute("isDirty") != "1" && !parent.item.getAttribute("action"))//if no action is specified then reload Workflow Process data from server
  {
    var aml =
      "<AML>" +
        "<Item type='Workflow Process' action='get' id='" + parent.itemID +"'>" +
          "<Relationships>"+
            "<Item type='Workflow Process Activity' action='get' select='related_id'>"+
              "<related_id>"+
                "<Item type='Activity' action='get' select='name, label, state, escalate_to, role, expected_duration, message, managed_by_id'>"+
                  "<cloned_as condition='is null'/>"+
                  "<Relationships>"+
                    "<Item type='Activity Assignment' action='get' select='related_id(keyed_name),is_required,for_all_members,voting_weight,escalate_to'/>"+
                  "</Relationships>"+
                "</Item>"+
              "</related_id>"+
            "</Item>"+
          "</Relationships>" +
        "</Item>" +
      "</AML>";

    var q = top.aras.newIOMItem();
    q.loadAml(aml);
    var r = q.apply();

    if (!r.isError())
    {
      parent.item.text = "";//clear "old" data
      top.aras.mergeItem(parent.item, r.node);//merge new data
    }

    q = undefined;
    r = undefined;
  }

  this.actArray = new Array();
  var actNds = curWflProcess.selectNodes(".//Relationships/Item[@type='Workflow Process Activity']/related_id/Item[@type='Activity']");
  for (var i=0;i<actNds.length;i++){
    var tmpAct = new Activity(actNds[i]);
    if (tmpAct && !tmpAct.hasError){
      this.actArray.push(tmpAct);
    }
  }
  this.fillListOfActivities();
  if (selectActiveActFlag){
    var activeActID = null;
    for (var i=0;i<this.actArray.length;i++){
      var is_active = top.aras.getItemProperty(this.actArray[i].node,"state");
      if (is_active=="Active") activeActID = this.actArray[i].id;
    }
    if (activeActID) this.selectActivity(activeActID);
  } else {
    this.selectedActivity = null;
  }
}

ActivityHandler.prototype.actArray;
ActivityHandler.prototype.selectedActivity;

ActivityHandler.prototype.handleActivity = function ActivityHandler_handleActivity(actNd){
  var actId = actNd.getId();
  var act = null;
  for (var i=0;i<this.actArray.length;i++){
    if (this.actArray[i] && this.actArray[i].id == actId){
      act = this.actArray[i];
      break;
    }
  }
  if (!act){
    var tmpNd = top.aras.getItemById("Activity",actId,0);
    act = new Activity(tmpNd);
    if (act && !act.hasError){
      this.actArray.push(act);
    } else {
      top.aras.AlertError("Activity with id=" + actId + " not found.");
      return;
    }
  }
  this.selectedActivity = act;
  act.showInForm();
}

ActivityHandler.prototype.fillListOfActivities = function ActivityHandler_fillListOfActivities(){
  var targetDropDown = document.getElementById("listOfActivities");
  if (targetDropDown){
    for (var i=0;i<this.actArray.length;i++){
      addActToList(i,this.actArray[i].id,this.actArray[i].name,targetDropDown);
    }
  }
  function addActToList(index,value,label,targetDropDown){
    var oOption = (targetDropDown.options(index)) ? targetDropDown.options(index) : document.createElement("OPTION");
    if (!targetDropDown.options(index)) targetDropDown.options.add(oOption);
    oOption.innerText = label;
    oOption.value = value;
    oOption.id = value;
  }
}
ActivityHandler.prototype.selectActivity = function ActivityHandler_selectActivity(id){
  for (var i=0;i<this.actArray.length;i++){
    if (this.actArray[i].id == id) this.selectedActivity = this.actArray[i];
  }
  if (this.selectedActivity) this.selectedActivity.showInForm();
}

var mainActivityHandler;

</script>]]></html_code>
      <is_disabled>0</is_disabled>
      <is_visible>1</is_visible>
      <label_position>top</label_position>
      <list_no_blank>0</list_no_blank>
      <name>activity_fields</name>
      <sort_order>2176</sort_order>
      <source_id keyed_name="875D0B3A072747ED9BF5290DA7F3111A" type="Body">875D0B3A072747ED9BF5290DA7F3111A</source_id>
      <tab_stop>1</tab_stop>
      <x>5</x>
      <y>105</y>
      <z_index>2</z_index>
     </Item>
     <Item type="Field" id="23E235D58E7C48CA8022FB60A8451668" action="merge">
      <name>item_info</name>
      <sort_order>2048</sort_order>
      <source_id keyed_name="875D0B3A072747ED9BF5290DA7F3111A" type="Body">875D0B3A072747ED9BF5290DA7F3111A</source_id>
      <tab_stop>0</tab_stop>
      <x>0</x>
      <y>-10</y>
     </Item>
     <Item type="Field" id="0ED3F679CD6E4664891515994034B6CC" action="merge">
      <name>MapInsert</name>
      <sort_order>128</sort_order>
      <source_id keyed_name="875D0B3A072747ED9BF5290DA7F3111A" type="Body">875D0B3A072747ED9BF5290DA7F3111A</source_id>
      <tab_stop>1</tab_stop>
      <width>800</width>
      <x>5</x>
      <y>350</y>
      <z_index>1</z_index>
     </Item>
     <Item type="Field" id="EB8DB43984844545A7D7801DB9834AA3" action="merge">
      <name>name</name>
      <display_length>60</display_length>
      <sort_order>0</sort_order>
      <source_id keyed_name="875D0B3A072747ED9BF5290DA7F3111A" type="Body">875D0B3A072747ED9BF5290DA7F3111A</source_id>
      <tab_index>1</tab_index>
      <tab_stop>1</tab_stop>
      <x>190</x>
      <y>10</y>
     </Item>
     <Item type="Field" id="8BD1987F2E9F4646B847218949119984" action="edit">
      <x>190</x>
      <y>10</y>
     </Item>
     <Item type="Field" id="8BD1987F2E9F4646B847218949119984" action="add">
      <name>created_by_id</name>
      <source_id keyed_name="875D0B3A072747ED9BF5290DA7F3111A" type="Body">875D0B3A072747ED9BF5290DA7F3111A</source_id>
      <tab_index>3</tab_index>
      <tab_stop>1</tab_stop>
      <x>190</x>
      <y>45</y>
     </Item>
	 
     <Item type="Field" id="EEA9470C382C4EB8A1ADA1A1A152DA9B" action="delete" />
     <Item type="Field" id="F763ED5910A74DE688B07228F660C4FF" action="delete" />


	 </Relationships>
   </Item>
  </Relationships>
 </Item>
</AML>